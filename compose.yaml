x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  postgres_db:
    driver: local
  postgres_user_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local

networks:
  default:
    driver: bridge

services:
  placement:
    image: "daprio/dapr:latest"
    command: ["./placement", "-port", "50006"]
    container_name: "placement"
    ports:
      - "50006:50006"
    networks:
      - default

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      # - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    profiles: ["database"]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  user_service:
    container_name: user-service
    build:
      context: ./user
      dockerfile: Dockerfile
    volumes:
      - ./user:/code  # Sync local development directory with the container
    depends_on:
      - postgres_user_db
      - placement
    ports:
      - "8040:8040"
    environment:
      - DAPR_HTTP_PORT=3501
      - DAPR_GRPC_PORT=50002
    command:
      [
        "dapr",
        "run",
        "--app-id",
        "user-service",
        "--app-port",
        "8040",
        "--dapr-http-port",
        "3501",
        "--dapr-grpc-port",
        "50002",
        "--",
        "poetry",
        "run",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8040",
        "--reload",
      ]
    networks:
      - default

  postgres_user_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
        - POSTGRES_USER=khurram
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5434:5432'
    volumes:
        - postgres_user_db:/var/lib/postgresql/data

  pbproduct_service:
    container_name: pbproduct-service
    build:
      context: ./pbproduct
      dockerfile: Dockerfile.dev
    volumes:
      - ./pbproduct:/code  # Sync local development directory with the container
    depends_on:
        - postgres_db
        - placement
        # - broker
    ports:
      - "8050:8050"  # Expose container port 8000 to host port 8000  
    environment:
      - DAPR_HTTP_PORT=3500
      - DAPR_GRPC_PORT=50001
    command:
      [
        "dapr",
        "run",
        "--app-id",
        "pbproduct-service",
        "--app-port",
        "8050",
        "--dapr-http-port",
        "3500",
        "--dapr-grpc-port",
        "50001",
        "--",
        "poetry",
        "run",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8050",
        "--reload",
      ]
    networks:
      - default
    
  postgres_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresCont
    environment:
        - POSTGRES_USER=khurram
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5433:5432'
    volumes:
        - postgres_db:/var/lib/postgresql/data

  inventory_service:
    container_name: inventory-service
    build:
      context: ./inventory
      dockerfile: Dockerfile
    volumes:
      - ./inventory:/code  # Sync local development directory with the container
    depends_on:
      - postgres_inventory_db
    ports:
      - "8020:8020"
    environment:
      - DAPR_HTTP_PORT=3502
      - DAPR_GRPC_PORT=50003
    command:
      [
        "dapr",
        "run",
        "--app-id",
        "inventory-service",
        "--app-port",
        "8020",
        "--dapr-http-port",
        "3502",
        "--dapr-grpc-port",
        "50003",
        "--",
        "poetry",
        "run",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8020",
        "--reload",
      ]
    networks:
      - default

  postgres_inventory_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
        - POSTGRES_USER=khurram
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5435:5432'
    volumes:
        - postgres_inventory_db:/var/lib/postgresql/data

  notification_service:
    container_name: notification-service
    build:
      context: ./notification
      dockerfile: Dockerfile
    volumes:
      - ./notification:/code
    ports:
      - "8030:8030"
    depends_on:
      - placement
    environment:
      - DAPR_HTTP_PORT=3503
      - DAPR_GRPC_PORT=50004
    command:
      [
        "dapr",
        "run",
        "--app-id",
        "notification-service",
        "--app-port",
        "8030",
        "--dapr-http-port",
        "3503",
        "--dapr-grpc-port",
        "50004",
        "--",
        "poetry",
        "run",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8030",
        "--reload",
      ]
  
  stripe_payment_service:
    container_name: stripe_payment-service
    build:
      context: ./stripe
      dockerfile: Dockerfile
    volumes:
      - ./stripe:/code
    ports:
      - "8060:8060"
    depends_on:
      - placement
    environment:
      - DAPR_HTTP_PORT=3504
      - DAPR_GRPC_PORT=50005
    command:
      [
        "dapr",
        "run",
        "--app-id",
        "notification-service",
        "--app-port",
        "8060",
        "--dapr-http-port",
        "3504",
        "--dapr-grpc-port",
        "50005",
        "--",
        "poetry",
        "run",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8060",
        "--reload",
      ]

  order_service:
    container_name: order-service
    build:
      context: ./order
      dockerfile: Dockerfile
    volumes:
      - ./order:/code  # Sync local development directory with the container
    depends_on:
      - postgres_order_db
    ports:
      - "8070:8070"

  postgres_order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
        - POSTGRES_USER=khurram
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5436:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
